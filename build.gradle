import java.text.SimpleDateFormat

def langLevel = '1.7'

ext.artifactVersion = newArtifactVersion()

task writeVersionInFile << {
  writeVersion(artifactVersion)
}

allprojects {
  group = 'org.hypoport.example'
}

subprojects {
  buildscript {
    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
    }
    dependencies {
      classpath 'com.github.ben-manes:gradle-versions-plugin:0.5'
    }
  }

  apply plugin: 'maven'
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'maven-publish'

  sourceCompatibility = langLevel
  targetCompatibility = langLevel

  repositories {
    mavenLocal()
    mavenCentral()
  }

  ext {
    springVersion = '4.1.1.RELEASE'
    springBootVersion = '1.1.7.RELEASE'
    springSecurityVersion = '3.2.5.RELEASE'
    jacksonVersion = '2.4.1'
    metricsVersion = '3.0.2'

    lib = [
        "spock-spring": [
            'org.spockframework:spock-spring:0.7-groovy-2.0',
            "org.springframework:spring-test:$springVersion"
        ]
    ]
  }

  def dependencyVersions = [
      'commons-lang:commons-lang'                : '2.6',
      'commons-logging:commons-logging'          : '1.1',
      'javax.mail:mail'                          : '1.4.7',
      'javax.servlet:javax.servlet-api'          : '3.1.0',
      'joda-time:joda-time'                      : '2.4',
      'org.apache.httpcomponents:httpclient'     : '4.3.4',
      'org.eclipse.jetty.orbit:javax.servlet'    : '3.0.0.v201112011016',
      'org.eclipse.jetty.orbit:javax.servlet.jsp': '2.2.0.v201112011158',
      'org.hamcrest:hamcrest-core'               : '1.3',
      'org.junit:junit'                          : '4.11',
      'xerces:xercesImpl'                        : '2.9.1',
      'xml-apis:xml-apis'                        : '1.3.04'
  ]

  def dependencyVersionsByGroup = [
      'org.apache.tomcat.embed'       : '8.0.12',
      'org.springframework'           : springVersion,
      'org.codehaus.groovy'           : '2.3.6',
      'org.slf4j'                     : '1.7.7',
      'com.fasterxml.jackson.core'    : jacksonVersion,
      'com.fasterxml.jackson.datatype': jacksonVersion
  ]

  dependencies {
    compile('org.codehaus.groovy:groovy-all:2.3.6') {
      exclude group: 'org.junit', module: 'junit'
    }
    compile('commons-lang:commons-lang:2.6')

    compile 'org.slf4j:slf4j-api:1.7.7'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.7'
    runtime 'ch.qos.logback:logback-classic:1.1.2'

    compile("org.easytesting:fest-assert:1.4")

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile lib."spock-spring"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    testCompile 'com.jayway.jsonpath:json-path-assert:0.9.1'
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8.8'
    testCompile 'javax.servlet:javax.servlet-api:3.1.0'
  }

  configurations {
    all*.exclude module: 'log4j'
    all*.exclude module: 'servlet-api'

    all {
      resolutionStrategy {
        failOnVersionConflict()

        force dependencyVersions.collect {
          artifact, version -> "$artifact:$version"
        }

        eachDependency { DependencyResolveDetails details ->
          if (dependencyVersionsByGroup[details.requested.group]) {
            details.useVersion dependencyVersionsByGroup[details.requested.group]
          }
        }
      }
    }
  }

  publishing {
    repositories {
      maven {
        url project["nexus.publish.url"]
        credentials {
          username project["nexus.publish.username"]
          password project["nexus.publish.password"]
        }
      }
    }
    publications {
      mavenJava(MavenPublication) {
        version artifactVersion
        from components.java
      }
    }
  }

  tasks.publish.dependsOn writeVersionInFile

  task testNG(type: Test) {
    useTestNG()
  }

  test {
    dependsOn testNG
    useJUnit()
  }

  task aggregateTestReports(type: TestReport) {
    destinationDir = test.reports.html.destination
    reportOn test, testNG
  }

  check.dependsOn aggregateTestReports
}

def newArtifactVersion() {
  def commitHash = lastCommitHash()
  def localDateTime = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date())
  return localDateTime + "_" + commitHash
}

def lastCommitHash() {
  def proc = "git rev-parse HEAD".execute([], projectDir)
  proc.waitFor()
  return "${proc.in.text}".trim()
}

def writeVersion(def version) {
  println "Writing new version file"
  new File(rootDir.absolutePath + "/version.txt").write(version)
}


task wrapper(type: Wrapper) {
  gradleVersion = '2.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
